name: Test All Packages
# This comprehensive workflow tests all packages (CLI, Server, Web)

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:

  test-server:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-server-${{ hashFiles('note-server/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-server-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        
    - name: Test Server
      working-directory: note-server
      run: |
        go mod download
        go mod verify
        go build ./...
        go test -v -coverprofile=coverage.out ./...
        
    - name: Upload Server coverage
      uses: actions/upload-artifact@v4
      with:
        name: server-coverage
        path: note-server/coverage.out
        retention-days: 7

  test-web:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'note-web/package-lock.json'
    
    - name: Test Web
      working-directory: note-web
      run: |
        npm ci
        npx tsc --noEmit
        npm run lint
        npm run test:coverage -- --watchAll=false
        npm run build
        
    - name: Upload Web coverage
      uses: actions/upload-artifact@v4
      with:
        name: web-coverage
        path: note-web/coverage/
        retention-days: 7

  coverage-report:
    needs: [test-server, test-web]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Server and Web coverage reports
      uses: actions/download-artifact@v4
      with:
        path: coverage
    
    - name: Display coverage summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f coverage/server-coverage/coverage.out ]; then
          echo "### Server Coverage" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage/server-coverage/coverage.out | tail -1 >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d coverage/web-coverage ]; then
          echo "### Web Coverage" >> $GITHUB_STEP_SUMMARY
          echo "Web coverage report generated (see artifacts)" >> $GITHUB_STEP_SUMMARY
        fi
